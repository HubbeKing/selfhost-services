apiVersion: v1
kind: ConfigMap
metadata:
  name: envs
  namespace: authelia
data:
  AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: /config/secrets/JWT_TOKEN
  AUTHELIA_SESSION_SECRET_FILE: /config/secrets/SESSION_KEY
  AUTHELIA_SESSION_REDIS_PASSWORD_FILE: /config/secrets/REDIS_PASSWORD
  AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE: /config/secrets/LDAP_PASSWORD
  AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /config/secrets/SMTP_PASSWORD
  AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /config/secrets/ENCRYPTION_KEY
  AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE: /config/secrets/MYSQL_PASSWORD
  #AUTHELIA_IDENTITY_PROVIDERS_OIDC_ISSUER_PRIVATE_KEY_FILE: /config/secrets/OIDC_ISSUER_PRIVATE_KEY
  #AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET_FILE: /config/secrets/OIDC_HMAC_SECRET
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config
  namespace: authelia
data:
  configuration.yml: |
    ###############################################################################
    #                           Authelia Configuration                            #
    ###############################################################################

    ## The theme to display: light, dark, grey, auto.
    theme: dark

    ##
    ## Server Configuration
    ##
    server:
      ## The address to listen on
      address: tcp://0.0.0.0:9091

      ## Buffers usually should be configured to be the same value.
      ## Explanation at https://www.authelia.com/docs/configuration/server.html
      ## Read buffer size adjusts the server's max incoming request size in bytes.
      ## Write buffer size does the same for outgoing responses.
      buffers:
        read: 4096
        write: 4096

    log:
      ## Level of verbosity for logs: info, debug, trace.
      level: info

      ## Format the logs are written as: json, text.
      format: text

    ##
    ## TOTP Configuration
    ##
    ## Parameters used for TOTP generation.
    totp:
      ## The issuer name displayed in the Authenticator application of your choice
      ## See: https://github.com/google/google-authenticator/wiki/Key-Uri-Format for more info on issuer names
      issuer: hubbe.club
      ## The period in seconds a one-time password is current for. Changing this will require all users to register
      ## their TOTP applications again. Warning: before changing period read the docs link below.
      period: 30
      ## The skew controls number of one-time passwords either side of the current one that are valid.
      ## Warning: before changing skew read the docs link below.
      skew: 1
      ## See: https://www.authelia.com/docs/configuration/one-time-password.html#period-and-skew to read the documentation.

    ##
    ## Authentication Backend Provider Configuration
    ##
    ## Used for verifying user passwords and retrieve information such as email address and groups users belong to.
    ##
    ## The available providers are: `file`, `ldap`. You must use only one of these providers.
    authentication_backend:
      ## Password Reset Options.
      password_reset:
        ## Disable both the HTML element and the API for reset password functionality.
        disable: false

        ## External reset password url that redirects the user to an external reset portal. This disables the internal reset
        ## functionality.
        custom_url: ""

      ## The amount of time to wait before we refresh data from the authentication backend. Uses duration notation.
      ## To disable this feature set it to 'disable', this will slightly reduce security because for Authelia, users will
      ## always belong to groups they belonged to at the time of login even if they have been removed from them in LDAP.
      ## To force update on every request you can set this to '0' or 'always', this will increase processor demand.
      ## See the below documentation for more information.
      ## Duration Notation docs:  https://www.authelia.com/docs/configuration/index.html#duration-notation-format
      ## Refresh Interval docs: https://www.authelia.com/docs/configuration/authentication/ldap.html#refresh-interval
      refresh_interval: 5m

      ##
      ## LDAP (Authentication Provider)
      ##
      ## This is the recommended Authentication Provider in production
      ## because it allows Authelia to offload the stateful operations
      ## onto the LDAP service.
      ldap:
        ## The LDAP implementation, this affects elements like the attribute utilised for resetting a password.
        ## Acceptable options are as follows:
        ## - 'activedirectory' - For Microsoft Active Directory.
        ## - 'custom' - For custom specifications of attributes and filters.
        ## This currently defaults to 'custom' to maintain existing behaviour.
        ##
        ## Depending on the option here certain other values in this section have a default value, notably all of the
        ## attribute mappings have a default value that this config overrides, you can read more about these default values
        ## at https://www.authelia.com/docs/configuration/authentication/ldap.html#defaults
        implementation: custom

        ## The address to the ldap server. Format: <scheme>://<address>[:<port>].
        ## Scheme can be ldap or ldaps in the format (port optional).
        address: ldap://openldap.authelia.svc.cluster.local

        ## Use StartTLS with the LDAP connection.
        start_tls: false

        ## The distinguished name of the container searched for objects in the directory information tree.
        ## See also: additional_users_dn, additional_groups_dn.
        base_dn: dc=hubbe,dc=club

        ## The attribute holding the username of the user. This attribute is used to populate the username in the session
        ## information. It was introduced due to #561 to handle case insensitive search queries. For you information,
        ## Microsoft Active Directory usually uses 'sAMAccountName' and OpenLDAP usually uses 'uid'. Beware that this
        ## attribute holds the unique identifiers for the users binding the user and the configuration stored in database.
        ## Therefore only single value attributes are allowed and the value must never be changed once attributed to a user
        ## otherwise it would break the configuration for that user. Technically, non-unique attributes like 'mail' can also
        ## be used but we don't recommend using them, we instead advise to use the attributes mentioned above
        ## (sAMAccountName and uid) to follow https://www.ietf.org/rfc/rfc2307.txt.
        # username_attribute: uid

        ## The additional_users_dn is prefixed to base_dn and delimited by a comma when searching for users.
        ## i.e. with this set to OU=Users and base_dn set to DC=a,DC=com; OU=Users,DC=a,DC=com is searched for users.
        additional_users_dn: ou=users

        ## The users filter used in search queries to find the user profile based on input filled in login form.
        ## Various placeholders are available in the user filter:
        ## - {input} is a placeholder replaced by what the user inputs in the login form.
        ## - {username_attribute} is a mandatory placeholder replaced by what is configured in `username_attribute`.
        ## - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
        ##
        ## Recommended settings are as follows:
        ## - Microsoft Active Directory: (&({username_attribute}={input})(objectCategory=person)(objectClass=user))
        ## - OpenLDAP:
        ##   - (&({username_attribute}={input})(objectClass=person))
        ##   - (&({username_attribute}={input})(objectClass=inetOrgPerson))
        ##
        ## To allow sign in both with username and email, one can use a filter like
        ## (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
        users_filter: (&({username_attribute}={input})(objectClass=inetOrgPerson))

        ## The additional_groups_dn is prefixed to base_dn and delimited by a comma when searching for groups.
        ## i.e. with this set to OU=Groups and base_dn set to DC=a,DC=com; OU=Groups,DC=a,DC=com is searched for groups.
        additional_groups_dn: ou=groups

        ## The groups filter used in search queries to find the groups of the user.
        ## - {input} is a placeholder replaced by what the user inputs in the login form.
        ## - {username} is a placeholder replace by the username stored in LDAP (based on `username_attribute`).
        ## - {dn} is a matcher replaced by the user distinguished name, aka, user DN.
        ## - {username_attribute} is a placeholder replaced by what is configured in `username_attribute`.
        ## - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
        ##
        ## If your groups use the `groupOfUniqueNames` structure use this instead:
        ##    (&(uniquemember={dn})(objectclass=groupOfUniqueNames))
        groups_filter: (&(uniquemember={dn})(objectclass=groupOfUniqueNames))

        attributes:
          ## The attribute holding the name of the group.
          group_name: cn

          ## The attribute holding the mail address of the user. If multiple email addresses are defined for a user, only the
          ## first one returned by the LDAP server is used.
          mail: mail

          ## The attribute holding the display name of the user. This will be used to greet an authenticated user.
          display_name: cn

        ## The username and password of the admin user.
        user: cn=admin,dc=hubbe,dc=club
        ## Password can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html

    ##
    ## Access Control Configuration
    ##
    ## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
    ##
    ## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
    ## to anyone. Otherwise restrictions follow the rules defined.
    ##
    ## Note: One can use the wildcard * to match any subdomain.
    ## It must stand at the beginning of the pattern. (example: *.mydomain.com)
    ##
    ## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
    ##
    ## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
    ##
    ## - 'domain' defines which domain or set of domains the rule applies to.
    ##
    ## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
    ##    provided. If provided, the parameter represents either a user or a group. It should be of the form
    ##    'user:<username>' or 'group:<groupname>'.
    ##
    ## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
    ##
    ## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
    ##   is optional and matches any resource if not provided.
    ##
    ## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
    access_control:
      ## Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
      ## resource if there is no policy to be applied to the user.
      default_policy: deny

      networks:
        - name: internal
          networks:
            - 10.0.0.0/8
            - 192.168.1.0/24
        - name: VPN
          networks: 192.168.2.0/24

      rules:
        - domain: "*.hubbe.club"
          networks:
            - VPN
          policy: bypass

        - domain: deepdream.hubbe.club
          subject:
            - group:DeepdreamUsers
          policy: one_factor

        - domain: trove.hubbe.club
          subject:
            - group:TroveUsers
          policy: one_factor

          # nzb360 can't do custom authentication at all
          # Bypass, since /api endpoints do nothing useful without the API key
        - domain:
            - bazarr.hubbe.club
            - lidarr.hubbe.club
            - prowlarr.hubbe.club
            - radarr.hubbe.club
            - sonarr.hubbe.club
          resources:
            - '^/api.*$'
          policy: bypass

        - domain: "*.hubbe.club"
          subject:
            - group:admins
          policy: two_factor

    ##
    ## Session Provider Configuration
    ##
    ## The session cookies identify the user once logged in.
    ## The available providers are: `memory`, `redis`. Memory is the provider unless redis is defined.
    session:
      ## The name of the session cookie.
      name: authelia

      ## Sets the Cookie SameSite value. Possible options are none, lax, or strict.
      ## Please read https://www.authelia.com/docs/configuration/session.html#same_site
      same_site: lax

      ## The secret to encrypt the session data. This is only used with Redis / Redis Sentinel.
      ## Secret can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html

      ## The value for expiration, inactivity, and remember_me_duration are in seconds or the duration notation format.
      ## See: https://www.authelia.com/docs/configuration/index.html#duration-notation-format
      ## All three of these values affect the cookie/session validity period. Longer periods are considered less secure
      ## because a stolen cookie will last longer giving attackers more time to spy or attack.

      ## The time before the cookie expires and the session is destroyed if remember me IS NOT selected.
      expiration: 1h

      ## The inactivity time before the session is reset. If expiration is set to 1h, and this is set to 5m, if the user
      ## does not select the remember me option their session will get destroyed after 1h, or after 5m since the last time
      ## Authelia detected user activity.
      inactivity: 5m

      ## The time before the cookie expires and the session is destroyed if remember me IS selected.
      ## Value of 0 disables remember me.
      remember_me: 1M

      # domain protection settings:
      cookies:
        - domain: 'hubbe.club'
          authelia_url: 'https://auth.hubbe.club'
          default_redirection_url: 'https://cloud.hubbe.club'

      ##
      ## Redis Provider
      ##
      ## Important: Kubernetes (or HA) users must read https://www.authelia.com/docs/features/statelessness.html
      ##
      redis:
        #host: redis.authelia.svc.cluster.local
        port: 26379

        ## Username used for redis authentication. This is optional and a new feature in redis 6.0.
        # username: authelia

        ## Password can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html

        ## This is the Redis DB Index https://redis.io/commands/select (sometimes referred to as database number, DB, etc).
        database_index: 0

        ## The maximum number of concurrent active connections to Redis.
        maximum_active_connections: 8

        ## The target number of idle connections to have open ready for work. Useful when opening connections is slow.
        minimum_idle_connections: 0

        ## The Redis HA configuration options.
        ## This provides specific options to Redis Sentinel, sentinel_name must be defined (Master Name).
        high_availability:
          ## Sentinel Name / Master Name.
          sentinel_name: authelia

          ## Specific password for Redis Sentinel. The node username and password is configured above.
          ## Password can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html

          ## The additional nodes to pre-seed the redis provider with (for sentinel).
          ## If the host in the above section is defined, it will be combined with this list to connect to sentinel.
          ## For high availability to be used you must have either defined; the host above or at least one node below.
          nodes:
            - host: redis-0.redis.authelia.svc.cluster.local
              port: 26379
            - host: redis-1.redis.authelia.svc.cluster.local
              port: 26379
            - host: redis-2.redis.authelia.svc.cluster.local
              port: 26379

          ## Choose the host with the lowest latency.
          route_by_latency: false

          ## Choose the host randomly.
          route_randomly: true

    ##
    ## Regulation Configuration
    ##
    ## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are made
    ## in a short period of time.
    regulation:
      ## The number of failed login attempts before user is banned. Set it to 0 to disable regulation.
      max_retries: 3

      ## The time range during which the user can attempt login before being banned. The user is banned if the
      ## authentication failed 'max_retries' times in a 'find_time' seconds window. Find Time accepts duration notation.
      ## See: https://www.authelia.com/docs/configuration/index.html#duration-notation-format
      find_time: 2m

      ## The length of time before a banned user can login again. Ban Time accepts duration notation.
      ## See: https://www.authelia.com/docs/configuration/index.html#duration-notation-format
      ban_time: 5m

    ##
    ## Storage Provider Configuration
    ##
    ## The available providers are: `local`, `mysql`, `postgres`. You must use one and only one of these providers.
    storage:

      ##
      ## MySQL / MariaDB (Storage Provider)
      ##
      mysql:
        address: tcp://mariadb.authelia.svc.cluster.local:3306
        database: authelia
        username: authelia
        ## Password can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html

    ##
    ## Notification Provider
    ##
    ## Notifications are sent to users when they require a password reset, a U2F registration or a TOTP registration.
    ## The available providers are: filesystem, smtp. You must use only one of these providers.
    notifier:
      ## You can disable the notifier startup check by setting this to true.
      disable_startup_check: false

      ##
      ## SMTP (Notification Provider)
      ##
      ## Use a SMTP server for sending notifications. Authelia uses the PLAIN or LOGIN methods to authenticate.
      ## [Security] By default Authelia will:
      ##   - force all SMTP connections over TLS including unauthenticated connections
      ##      - use the disable_require_tls boolean value to disable this requirement
      ##        (only works for unauthenticated connections)
      ##   - validate the SMTP server x509 certificate during the TLS handshake against the hosts trusted certificates
      ##     (configure in tls section)
      smtp:
        username: raz@foxtek.fi
        ## Password can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html
        address: submissions://smtp.fastmail.com:465
        sender: noreply@hubbe.club
        ## HELO/EHLO Identifier. Some SMTP Servers may reject the default of localhost.
        identifier: authelia@hubbe.club
        ## Subject configuration of the emails sent. {title} is replaced by the text from the notifier.
        subject: "[Authelia] {title}"
        ## This address is used during the startup check to verify the email configuration is correct.
        ## It's not important what it is except if your email server only allows local delivery.
        startup_check_address: authelia@hubbe.club
        disable_require_tls: false
        disable_html_emails: false

        tls:
          ## Server Name for certificate validation (in case you are using the IP or non-FQDN in the host option).
          # server_name: smtp.example.com

          ## Skip verifying the server certificate (to allow a self-signed certificate).
          ## In preference to setting this we strongly recommend you add the public portion of the certificate to the
          ## certificates directory which is defined by the `certificates_directory` option at the top of the config.
          skip_verify: false

          ## Minimum TLS version for either StartTLS or SMTPS.
          minimum_version: TLS1.2

    ##
    ## Identity Providers
    ##
    # identity_providers:
      ##
      ## OpenID Connect (Identity Provider)
      ##
      ## It's recommended you read the documentation before configuration of this section:
      ## https://www.authelia.com/docs/configuration/identity-providers/oidc.html
      # oidc:
        ## The hmac_secret is used to sign OAuth2 tokens (authorization code, access tokens and refresh tokens).
        ## HMAC Secret can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html

        ## The issuer_private_key is used to sign the JWT forged by OpenID Connect.
        ## Issuer Private Key can also be set using a secret: https://docs.authelia.com/configuration/secrets.html

        ## Clients is a list of known clients and their configuration.
        # clients:
          ## The ID is the OpenID Connect ClientID which is used to link an application to a configuration.
          # - id: myapp

            ## The description to show to users when they end up on the consent screen. Defaults to the ID above.
            # description: My Application

            ## The client secret is a shared secret between Authelia and the consumer of this client.
            # secret: this_is_a_secret

            ## Sets the client to public. This should typically not be set, please see the documentation for usage.
            # public: false

            ## The policy to require for this client; one_factor or two_factor.
            # authorization_policy: two_factor

            ## Audience this client is allowed to request.
            # audience: []

            ## Scopes this client is allowed to request.
            # scopes:
              # - openid
              # - groups
              # - email
              # - profile

            ## Redirect URI's specifies a list of valid case-sensitive callbacks for this client.
            # redirect_uris:
            # - https://oidc.example.com:8080/oauth2/callback

            ## Grant Types configures which grants this client can obtain.
            ## It's not recommended to define this unless you know what you're doing.
            # grant_types:
              # - refresh_token
              # - authorization_code

            ## Response Types configures which responses this client can be sent.
            ## It's not recommended to define this unless you know what you're doing.
            # response_types:
              # - code

            ## Response Modes configures which response modes this client supports.
            # response_modes:
              # - form_post
              # - query
              # - fragment

            ## The algorithm used to sign userinfo endpoint responses for this client, either none or RS256.
            # userinfo_signing_algorithm: none
