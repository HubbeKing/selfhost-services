apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: foundry-dead-suns
  annotations:
    # disable client_max_body_size checking, to allow large uploads
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
spec:
  tls:
    - hosts:
      - foundry.hubbe.club
  rules:
    - host: foundry.hubbe.club
      http:
        paths:
          - path: /suns
            backend:
              serviceName: foundry-dead-suns
              servicePort: 30000
---
apiVersion: v1
kind: Service
metadata:
  name: foundry-dead-suns
spec:
  ports:
    - port: 30000
  selector:
    app: foundry-dead-suns
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: foundry-dead-suns
  annotations:
    stash.appscode.com/backup-blueprint: app-backup
    stash.appscode.com/target-paths: "/data"
    stash.appscode.com/volume-mounts: "data:/data"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: foundry-dead-suns
  serviceName: foundry-dead-suns
  template:
    metadata:
      labels:
        app: foundry-dead-suns
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      imagePullSecrets:
        - name: registry-hubbe-club-creds
      containers:
        - image: registry.hubbe.club/foundry:v0.6.2
          name: foundry-dead-suns
          command: ["node"]
          args: ["/foundry/resources/app/main.js", "--dataPath=/data", "--world=dead-suns"]
          resources:
            requests:
              cpu: "100m"
              memory: "500Mi"
          volumeMounts:
            - name: data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: longhorn
        resources:
          requests:
            storage: 1Gi
