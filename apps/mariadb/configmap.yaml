apiVersion: v1
kind: ConfigMap
metadata:
  name: mariadb-scripts
  namespace: database
data:
  # if we are pod ordinal 0, and we cannot reach any other pods, do a cluster-up for the mariadb galera cluster.
  # otherwise, attempt to join the existing galera cluster.
  # this is only really a problem if pod 0 ever crashes, which can happen.
  startup.sh: |
    #!/bin/bash
    # manually set wsrep_node_address and wsrep_node_name in galera config based on pod IP and hostname
    sed -i 's|POD_IP|'"$POD_IP"'|' /etc/mysql/conf.d/galera.cnf
    sed -i 's|HOSTNAME|'"$HOSTNAME"'|' /etc/mysql/conf.d/galera.cnf
    ORDINAL=${HOSTNAME##*-}
    if [ $ORDINAL = "0" ]; then
      # pod-0
      # check if cluster is already up
      if mariadb --host=galera.database.svc.cluster.local --user=${MARIADB_USER} --password=${MARIADB_PASSWORD} --execute 'SELECT 1'; then
        # connect to cluster
        docker-entrypoint.sh mariadbd
      else
        # new cluster
        echo "INFO: Assuming cluster is not up. Bootstrapping..."
        grep -q 'safe_to_bootstrap: 0' /var/lib/mysql/grastate.dat
        BOOTSTRAP_SAFE=$?
        if [ $BOOTSTRAP_SAFE = 0 ] && [ $BOOTSTRAP_FORCE = true ]; then
            echo "WARNING: safe_to_bootstrap is 0 but $BOOTSTRAP_FORCE is true, forcing bootstrap..."
            sed -i 's|safe_to_bootstrap: 0|safe_to_bootstrap: 1|' /var/lib/mysql/grastate.dat
        fi
        docker-entrypoint.sh mariadbd --wsrep-new-cluster
      fi
    else
      # pod-1 or above, connect to cluster
      docker-entrypoint.sh mariadbd
    fi
  shutdown.sh: |
    #!/bin/bash
    ORDINAL=${HOSTNAME##*-}
    # if we're ordinal 0, nap for 15s, in case this is a full statefulset delete
    # so that higher ordinals have time for graceful shutdown
    if [ $ORDINAL = "0" ]; then
      sleep 15
    fi
    # gracefully shutdown - this doesn't happen on SIGTERM if there's open connections, but we WANT it to.
    mariadb --host=localhost --user=root --password=${MARIADB_ROOT_PASSWORD} --execute 'SHUTDOWN WAIT FOR ALL REPLICAS'
  healthcheck.sh: |
    #!/bin/bash
    set -e
    # test TCP connection
    mariadb --user=${MARIADB_USER} --password=${MARIADB_PASSWORD} --host localhost --protocol tcp -e 'select 1' 2>&1
    # test InnoDB initialization
    s=$(mariadb --user=${MARIADB_USER} --password=${MARIADB_PASSWORD} --skip-column-names -e 'select 1 from information_schema.ENGINES WHERE engine="innodb" AND support in ("YES", "DEFAULT", "ENABLED")')
    if (( "$s" != 1 )); then
      echo "InnoDB not initialized!"
      exit 1
    fi
    # test Galera node status for SYNCED state
    s=$(mariadb --user=${MARIADB_USER} --password=${MARIADB_PASSWORD} --skip-column-names -e 'select VARIABLE_VALUE from information_schema.GLOBAL_STATUS WHERE VARIABLE_NAME="WSREP_LOCAL_STATE"')
    if (( "$s" != 4 )); then
      echo "Galera node not in state SYNCED, instead in state $s!"
      exit 1
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mariadb-configs
  namespace: database
data:
  # galera clustering configuration
  # for performance tweaks, see https://thoughtsimproved.wordpress.com/2020/01/07/tuning-a-mariadb-galera-cluster-for-performance/
  galera.cnf: |
    [galera]
    wsrep_on=ON
    wsrep_provider="/usr/lib/libgalera_smm.so"
    wsrep_cluster_address="gcomm://mariadb-0.galera.database.svc.cluster.local,mariadb-1.galera.database.svc.cluster.local,mariadb-2.galera.database.svc.cluster.local"
    wsrep_cluster_name="mariadb"
    wsrep_node_address=POD_IP
    wsrep_node_name=HOSTNAME
    binlog_format=ROW
    default_storage_engine=InnoDB
    innodb_autoinc_lock_mode=2
    innodb_doublewrite=1
    query_cache_size=0
    innodb_flush_log_at_trx_commit=2
    wsrep_slave_threads=8
    innodb_io_capacity=2000
    innodb_io_capacity_max=10000
    innodb_buffer_pool_size=768M
    innodb_log_buffer_size=64M
    innodb_log_file_size=1G
    innodb_read_io_threads=8
    innodb_write_io_threads=4
    thread_handling=pool-of-threads
    thread_stack=192K
    thread_cache_size=4
    thread_pool_size=8
    thread_pool_oversubscribe=3
  # general database configuration
  config.cnf: |
    [mysqld]
    transaction_isolation=READ-COMMITTED
    performance_schema=on
    max_connections=1000
